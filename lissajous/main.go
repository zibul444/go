package main

import (
	"fmt"
	"image"
	"image/color"
	"image/gif"
	"math"
	"math/rand"
	"net/url"
	"reflect"
	"sort"
	"strconv"
	"strings"
)

import (
	"log"
	"net/http"
	"time"
)

type Properties struct {
	Cycles  int
	Res     float64
	Size    int
	Nframes int
	Delay   int
}

var (
	//palette = []color.Color{
	//	color.Black, color.RGBA{0, 230, 64, 1}, color.White,	color.RGBA{207, 0, 15, 1},
	//	color.RGBA{140, 20, 252, 1}, color.RGBA{77, 5, 232, 1}, color.RGBA{240, 255, 0, 1}}

	palette = []color.Color{
		color.RGBA{0x00, 0x00, 0x00, 0xff},
		color.RGBA{0x00, 0x00, 0x44, 0xff},
		color.RGBA{0x00, 0x00, 0x88, 0xff},
		color.RGBA{0x00, 0x00, 0xcc, 0xff},
		color.RGBA{0x00, 0x44, 0x00, 0xff},
		color.RGBA{0x00, 0x44, 0x44, 0xff},
		color.RGBA{0x00, 0x44, 0x88, 0xff},
		color.RGBA{0x00, 0x44, 0xcc, 0xff},
		color.RGBA{0x00, 0x88, 0x00, 0xff},
		color.RGBA{0x00, 0x88, 0x44, 0xff},
		color.RGBA{0x00, 0x88, 0x88, 0xff},
		color.RGBA{0x00, 0x88, 0xcc, 0xff},
		color.RGBA{0x00, 0xcc, 0x00, 0xff},
		color.RGBA{0x00, 0xcc, 0x44, 0xff},
		color.RGBA{0x00, 0xcc, 0x88, 0xff},
		color.RGBA{0x00, 0xcc, 0xcc, 0xff},
		color.RGBA{0x00, 0xdd, 0xdd, 0xff},
		color.RGBA{0x11, 0x11, 0x11, 0xff},
		color.RGBA{0x00, 0x00, 0x55, 0xff},
		color.RGBA{0x00, 0x00, 0x99, 0xff},
		color.RGBA{0x00, 0x00, 0xdd, 0xff},
		color.RGBA{0x00, 0x55, 0x00, 0xff},
		color.RGBA{0x00, 0x55, 0x55, 0xff},
		color.RGBA{0x00, 0x4c, 0x99, 0xff},
		color.RGBA{0x00, 0x49, 0xdd, 0xff},
		color.RGBA{0x00, 0x99, 0x00, 0xff},
		color.RGBA{0x00, 0x99, 0x4c, 0xff},
		color.RGBA{0x00, 0x99, 0x99, 0xff},
		color.RGBA{0x00, 0x93, 0xdd, 0xff},
		color.RGBA{0x00, 0xdd, 0x00, 0xff},
		color.RGBA{0x00, 0xdd, 0x49, 0xff},
		color.RGBA{0x00, 0xdd, 0x93, 0xff},
		color.RGBA{0x00, 0xee, 0x9e, 0xff},
		color.RGBA{0x00, 0xee, 0xee, 0xff},
		color.RGBA{0x22, 0x22, 0x22, 0xff},
		color.RGBA{0x00, 0x00, 0x66, 0xff},
		color.RGBA{0x00, 0x00, 0xaa, 0xff},
		color.RGBA{0x00, 0x00, 0xee, 0xff},
		color.RGBA{0x00, 0x66, 0x00, 0xff},
		color.RGBA{0x00, 0x66, 0x66, 0xff},
		color.RGBA{0x00, 0x55, 0xaa, 0xff},
		color.RGBA{0x00, 0x4f, 0xee, 0xff},
		color.RGBA{0x00, 0xaa, 0x00, 0xff},
		color.RGBA{0x00, 0xaa, 0x55, 0xff},
		color.RGBA{0x00, 0xaa, 0xaa, 0xff},
		color.RGBA{0x00, 0x9e, 0xee, 0xff},
		color.RGBA{0x00, 0xee, 0x00, 0xff},
		color.RGBA{0x00, 0xee, 0x4f, 0xff},
		color.RGBA{0x00, 0xff, 0x55, 0xff},
		color.RGBA{0x00, 0xff, 0xaa, 0xff},
		color.RGBA{0x00, 0xff, 0xff, 0xff},
		color.RGBA{0x33, 0x33, 0x33, 0xff},
		color.RGBA{0x00, 0x00, 0x77, 0xff},
		color.RGBA{0x00, 0x00, 0xbb, 0xff},
		color.RGBA{0x00, 0x00, 0xff, 0xff},
		color.RGBA{0x00, 0x77, 0x00, 0xff},
		color.RGBA{0x00, 0x77, 0x77, 0xff},
		color.RGBA{0x00, 0x5d, 0xbb, 0xff},
		color.RGBA{0x00, 0x55, 0xff, 0xff},
		color.RGBA{0x00, 0xbb, 0x00, 0xff},
		color.RGBA{0x00, 0xbb, 0x5d, 0xff},
		color.RGBA{0x00, 0xbb, 0xbb, 0xff},
		color.RGBA{0x00, 0xaa, 0xff, 0xff},
		color.RGBA{0x00, 0xff, 0x00, 0xff},
		color.RGBA{0x44, 0x00, 0x44, 0xff},
		color.RGBA{0x44, 0x00, 0x88, 0xff},
		color.RGBA{0x44, 0x00, 0xcc, 0xff},
		color.RGBA{0x44, 0x44, 0x00, 0xff},
		color.RGBA{0x44, 0x44, 0x44, 0xff},
		color.RGBA{0x44, 0x44, 0x88, 0xff},
		color.RGBA{0x44, 0x44, 0xcc, 0xff},
		color.RGBA{0x44, 0x88, 0x00, 0xff},
		color.RGBA{0x44, 0x88, 0x44, 0xff},
		color.RGBA{0x44, 0x88, 0x88, 0xff},
		color.RGBA{0x44, 0x88, 0xcc, 0xff},
		color.RGBA{0x44, 0xcc, 0x00, 0xff},
		color.RGBA{0x44, 0xcc, 0x44, 0xff},
		color.RGBA{0x44, 0xcc, 0x88, 0xff},
		color.RGBA{0x44, 0xcc, 0xcc, 0xff},
		color.RGBA{0x44, 0x00, 0x00, 0xff},
		color.RGBA{0x55, 0x00, 0x00, 0xff},
		color.RGBA{0x55, 0x00, 0x55, 0xff},
		color.RGBA{0x4c, 0x00, 0x99, 0xff},
		color.RGBA{0x49, 0x00, 0xdd, 0xff},
		color.RGBA{0x55, 0x55, 0x00, 0xff},
		color.RGBA{0x55, 0x55, 0x55, 0xff},
		color.RGBA{0x4c, 0x4c, 0x99, 0xff},
		color.RGBA{0x49, 0x49, 0xdd, 0xff},
		color.RGBA{0x4c, 0x99, 0x00, 0xff},
		color.RGBA{0x4c, 0x99, 0x4c, 0xff},
		color.RGBA{0x4c, 0x99, 0x99, 0xff},
		color.RGBA{0x49, 0x93, 0xdd, 0xff},
		color.RGBA{0x49, 0xdd, 0x00, 0xff},
		color.RGBA{0x49, 0xdd, 0x49, 0xff},
		color.RGBA{0x49, 0xdd, 0x93, 0xff},
		color.RGBA{0x49, 0xdd, 0xdd, 0xff},
		color.RGBA{0x4f, 0xee, 0xee, 0xff},
		color.RGBA{0x66, 0x00, 0x00, 0xff},
		color.RGBA{0x66, 0x00, 0x66, 0xff},
		color.RGBA{0x55, 0x00, 0xaa, 0xff},
		color.RGBA{0x4f, 0x00, 0xee, 0xff},
		color.RGBA{0x66, 0x66, 0x00, 0xff},
		color.RGBA{0x66, 0x66, 0x66, 0xff},
		color.RGBA{0x55, 0x55, 0xaa, 0xff},
		color.RGBA{0x4f, 0x4f, 0xee, 0xff},
		color.RGBA{0x55, 0xaa, 0x00, 0xff},
		color.RGBA{0x55, 0xaa, 0x55, 0xff},
		color.RGBA{0x55, 0xaa, 0xaa, 0xff},
		color.RGBA{0x4f, 0x9e, 0xee, 0xff},
		color.RGBA{0x4f, 0xee, 0x00, 0xff},
		color.RGBA{0x4f, 0xee, 0x4f, 0xff},
		color.RGBA{0x4f, 0xee, 0x9e, 0xff},
		color.RGBA{0x55, 0xff, 0xaa, 0xff},
		color.RGBA{0x55, 0xff, 0xff, 0xff},
		color.RGBA{0x77, 0x00, 0x00, 0xff},
		color.RGBA{0x77, 0x00, 0x77, 0xff},
		color.RGBA{0x5d, 0x00, 0xbb, 0xff},
		color.RGBA{0x55, 0x00, 0xff, 0xff},
		color.RGBA{0x77, 0x77, 0x00, 0xff},
		color.RGBA{0x77, 0x77, 0x77, 0xff},
		color.RGBA{0x5d, 0x5d, 0xbb, 0xff},
		color.RGBA{0x55, 0x55, 0xff, 0xff},
		color.RGBA{0x5d, 0xbb, 0x00, 0xff},
		color.RGBA{0x5d, 0xbb, 0x5d, 0xff},
		color.RGBA{0x5d, 0xbb, 0xbb, 0xff},
		color.RGBA{0x55, 0xaa, 0xff, 0xff},
		color.RGBA{0x55, 0xff, 0x00, 0xff},
		color.RGBA{0x55, 0xff, 0x55, 0xff},
		color.RGBA{0x88, 0x00, 0x88, 0xff},
		color.RGBA{0x88, 0x00, 0xcc, 0xff},
		color.RGBA{0x88, 0x44, 0x00, 0xff},
		color.RGBA{0x88, 0x44, 0x44, 0xff},
		color.RGBA{0x88, 0x44, 0x88, 0xff},
		color.RGBA{0x88, 0x44, 0xcc, 0xff},
		color.RGBA{0x88, 0x88, 0x00, 0xff},
		color.RGBA{0x88, 0x88, 0x44, 0xff},
		color.RGBA{0x88, 0x88, 0x88, 0xff},
		color.RGBA{0x88, 0x88, 0xcc, 0xff},
		color.RGBA{0x88, 0xcc, 0x00, 0xff},
		color.RGBA{0x88, 0xcc, 0x44, 0xff},
		color.RGBA{0x88, 0xcc, 0x88, 0xff},
		color.RGBA{0x88, 0xcc, 0xcc, 0xff},
		color.RGBA{0x88, 0x00, 0x00, 0xff},
		color.RGBA{0x88, 0x00, 0x44, 0xff},
		color.RGBA{0x99, 0x00, 0x4c, 0xff},
		color.RGBA{0x99, 0x00, 0x99, 0xff},
		color.RGBA{0x93, 0x00, 0xdd, 0xff},
		color.RGBA{0x99, 0x4c, 0x00, 0xff},
		color.RGBA{0x99, 0x4c, 0x4c, 0xff},
		color.RGBA{0x99, 0x4c, 0x99, 0xff},
		color.RGBA{0x93, 0x49, 0xdd, 0xff},
		color.RGBA{0x99, 0x99, 0x00, 0xff},
		color.RGBA{0x99, 0x99, 0x4c, 0xff},
		color.RGBA{0x99, 0x99, 0x99, 0xff},
		color.RGBA{0x93, 0x93, 0xdd, 0xff},
		color.RGBA{0x93, 0xdd, 0x00, 0xff},
		color.RGBA{0x93, 0xdd, 0x49, 0xff},
		color.RGBA{0x93, 0xdd, 0x93, 0xff},
		color.RGBA{0x93, 0xdd, 0xdd, 0xff},
		color.RGBA{0x99, 0x00, 0x00, 0xff},
		color.RGBA{0xaa, 0x00, 0x00, 0xff},
		color.RGBA{0xaa, 0x00, 0x55, 0xff},
		color.RGBA{0xaa, 0x00, 0xaa, 0xff},
		color.RGBA{0x9e, 0x00, 0xee, 0xff},
		color.RGBA{0xaa, 0x55, 0x00, 0xff},
		color.RGBA{0xaa, 0x55, 0x55, 0xff},
		color.RGBA{0xaa, 0x55, 0xaa, 0xff},
		color.RGBA{0x9e, 0x4f, 0xee, 0xff},
		color.RGBA{0xaa, 0xaa, 0x00, 0xff},
		color.RGBA{0xaa, 0xaa, 0x55, 0xff},
		color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
		color.RGBA{0x9e, 0x9e, 0xee, 0xff},
		color.RGBA{0x9e, 0xee, 0x00, 0xff},
		color.RGBA{0x9e, 0xee, 0x4f, 0xff},
		color.RGBA{0x9e, 0xee, 0x9e, 0xff},
		color.RGBA{0x9e, 0xee, 0xee, 0xff},
		color.RGBA{0xaa, 0xff, 0xff, 0xff},
		color.RGBA{0xbb, 0x00, 0x00, 0xff},
		color.RGBA{0xbb, 0x00, 0x5d, 0xff},
		color.RGBA{0xbb, 0x00, 0xbb, 0xff},
		color.RGBA{0xaa, 0x00, 0xff, 0xff},
		color.RGBA{0xbb, 0x5d, 0x00, 0xff},
		color.RGBA{0xbb, 0x5d, 0x5d, 0xff},
		color.RGBA{0xbb, 0x5d, 0xbb, 0xff},
		color.RGBA{0xaa, 0x55, 0xff, 0xff},
		color.RGBA{0xbb, 0xbb, 0x00, 0xff},
		color.RGBA{0xbb, 0xbb, 0x5d, 0xff},
		color.RGBA{0xbb, 0xbb, 0xbb, 0xff},
		color.RGBA{0xaa, 0xaa, 0xff, 0xff},
		color.RGBA{0xaa, 0xff, 0x00, 0xff},
		color.RGBA{0xaa, 0xff, 0x55, 0xff},
		color.RGBA{0xaa, 0xff, 0xaa, 0xff},
		color.RGBA{0xcc, 0x00, 0xcc, 0xff},
		color.RGBA{0xcc, 0x44, 0x00, 0xff},
		color.RGBA{0xcc, 0x44, 0x44, 0xff},
		color.RGBA{0xcc, 0x44, 0x88, 0xff},
		color.RGBA{0xcc, 0x44, 0xcc, 0xff},
		color.RGBA{0xcc, 0x88, 0x00, 0xff},
		color.RGBA{0xcc, 0x88, 0x44, 0xff},
		color.RGBA{0xcc, 0x88, 0x88, 0xff},
		color.RGBA{0xcc, 0x88, 0xcc, 0xff},
		color.RGBA{0xcc, 0xcc, 0x00, 0xff},
		color.RGBA{0xcc, 0xcc, 0x44, 0xff},
		color.RGBA{0xcc, 0xcc, 0x88, 0xff},
		color.RGBA{0xcc, 0xcc, 0xcc, 0xff},
		color.RGBA{0xcc, 0x00, 0x00, 0xff},
		color.RGBA{0xcc, 0x00, 0x44, 0xff},
		color.RGBA{0xcc, 0x00, 0x88, 0xff},
		color.RGBA{0xdd, 0x00, 0x93, 0xff},
		color.RGBA{0xdd, 0x00, 0xdd, 0xff},
		color.RGBA{0xdd, 0x49, 0x00, 0xff},
		color.RGBA{0xdd, 0x49, 0x49, 0xff},
		color.RGBA{0xdd, 0x49, 0x93, 0xff},
		color.RGBA{0xdd, 0x49, 0xdd, 0xff},
		color.RGBA{0xdd, 0x93, 0x00, 0xff},
		color.RGBA{0xdd, 0x93, 0x49, 0xff},
		color.RGBA{0xdd, 0x93, 0x93, 0xff},
		color.RGBA{0xdd, 0x93, 0xdd, 0xff},
		color.RGBA{0xdd, 0xdd, 0x00, 0xff},
		color.RGBA{0xdd, 0xdd, 0x49, 0xff},
		color.RGBA{0xdd, 0xdd, 0x93, 0xff},
		color.RGBA{0xdd, 0xdd, 0xdd, 0xff},
		color.RGBA{0xdd, 0x00, 0x00, 0xff},
		color.RGBA{0xdd, 0x00, 0x49, 0xff},
		color.RGBA{0xee, 0x00, 0x4f, 0xff},
		color.RGBA{0xee, 0x00, 0x9e, 0xff},
		color.RGBA{0xee, 0x00, 0xee, 0xff},
		color.RGBA{0xee, 0x4f, 0x00, 0xff},
		color.RGBA{0xee, 0x4f, 0x4f, 0xff},
		color.RGBA{0xee, 0x4f, 0x9e, 0xff},
		color.RGBA{0xee, 0x4f, 0xee, 0xff},
		color.RGBA{0xee, 0x9e, 0x00, 0xff},
		color.RGBA{0xee, 0x9e, 0x4f, 0xff},
		color.RGBA{0xee, 0x9e, 0x9e, 0xff},
		color.RGBA{0xee, 0x9e, 0xee, 0xff},
		color.RGBA{0xee, 0xee, 0x00, 0xff},
		color.RGBA{0xee, 0xee, 0x4f, 0xff},
		color.RGBA{0xee, 0xee, 0x9e, 0xff},
		color.RGBA{0xee, 0xee, 0xee, 0xff},
		color.RGBA{0xee, 0x00, 0x00, 0xff},
		color.RGBA{0xff, 0x00, 0x00, 0xff},
		color.RGBA{0xff, 0x00, 0x55, 0xff},
		color.RGBA{0xff, 0x00, 0xaa, 0xff},
		color.RGBA{0xff, 0x00, 0xff, 0xff},
		color.RGBA{0xff, 0x55, 0x00, 0xff},
		color.RGBA{0xff, 0x55, 0x55, 0xff},
		color.RGBA{0xff, 0x55, 0xaa, 0xff},
		color.RGBA{0xff, 0x55, 0xff, 0xff},
		color.RGBA{0xff, 0xaa, 0x00, 0xff},
		color.RGBA{0xff, 0xaa, 0x55, 0xff},
		color.RGBA{0xff, 0xaa, 0xaa, 0xff},
		color.RGBA{0xff, 0xaa, 0xff, 0xff},
		color.RGBA{0xff, 0xff, 0x00, 0xff},
		color.RGBA{0xff, 0xff, 0x55, 0xff},
		color.RGBA{0xff, 0xff, 0xaa, 0xff},
		color.RGBA{0xff, 0xff, 0xff, 0xff}}

	colorIndex int // next color in palette

	liss Properties
)

func main() {

	rand.Seed(time.Now().UTC().UnixNano())

	http.HandleFunc("/l", lissajous)

	log.Fatalln(http.ListenAndServe("localhost:8000", nil))
}

func lissajous(out http.ResponseWriter, r *http.Request) {
	fmt.Println("HandleFunc lissajous was called")

	liss.Cycles = 5   // number of complete x oscillator revolutions
	liss.Res = 0.001  // angular resolution
	liss.Size = 400   // image canvas covers [-Size..+Size]
	liss.Nframes = 64 // number of animation frames
	liss.Delay = 8    // Delay between frames in 10ms units

	//printParam(r)
	valueExtract(r, &liss)

	//setTransferredValues(r, &liss.Cycles, &liss.Res, &liss.Size, &liss.Nframes, &liss.Delay)

	sortSlice()

	blackIndex := generateIndex()

	freq := rand.Float64() * 3.0 // relative frequency of y oscillator
	anim := gif.GIF{LoopCount: liss.Nframes}
	phase := 0.0 // phase difference
	for i := 0; i < liss.Nframes; i++ {
		rect := image.Rect(0, 0, 2*liss.Size+1, 2*liss.Size+1)
		img := image.NewPaletted(rect, palette)
		for t := 0.0; t < float64(liss.Cycles)*2*math.Pi; t += liss.Res {
			x := math.Sin(t)
			y := math.Sin(t*freq + phase)
			img.SetColorIndex(liss.Size+int(x*float64(liss.Size)+0.5), liss.Size+int(y*float64(liss.Size)+0.5),
				uint8(blackIndex))
		}
		phase += 0.1
		anim.Delay = append(anim.Delay, liss.Delay)
		anim.Image = append(anim.Image, img)
	}
	gif.EncodeAll(out, &anim) // NOTE: ignoring encoding errors
}

func generateIndex() int {
	for colorIndex = rand.Intn(int(len(palette))); colorIndex == 0; colorIndex = rand.Intn(int(len(palette))) {
	}
	return colorIndex
}

func sortSlice() {
	sort.Slice(palette, func(i, j int) bool {
		_, gi, _, _ := palette[i].RGBA()
		_, gj, _, _ := palette[j].RGBA()
		return gi < gj
	})
}

// deprecate
func setTransferredValues(r *http.Request, cycles *int, res *float64, size *int, nframes *int, delay *int) {
	if keys, ok := r.URL.Query()["Cycles"]; ok {
		fmt.Println("Cycles", keys[0])
		*cycles, _ = strconv.Atoi(keys[0])
	}
	if keys, ok := r.URL.Query()["Res"]; ok {
		fmt.Println("Res", keys)
		qwe, _ := strconv.Atoi(keys[0])
		*res = float64(qwe)
	}
	if keys, ok := r.URL.Query()["Size"]; ok {
		fmt.Println("Size", keys)
		*size, _ = strconv.Atoi(keys[0])
	}
	if keys, ok := r.URL.Query()["Nframes"]; ok {
		fmt.Println("Nframes", keys)
		*nframes, _ = strconv.Atoi(keys[0])
	}
	if keys, ok := r.URL.Query()["Delay"]; ok {
		fmt.Println("Delay", keys)
		*delay, _ = strconv.Atoi(keys[0])
	}
}

// deprecate
func printParam(r *http.Request) {
	//r.ParseForm()
	fmt.Println("Host", r.URL.Host)
	fmt.Println("RawQuery", strings.Split(r.URL.RawQuery, "&")[1])
	fmt.Println("RawPath", r.URL.RawPath)
	fmt.Println("Path", r.URL.Path)
	fmt.Println("ForceQuery", r.URL.ForceQuery)
	fmt.Println("Scheme", r.URL.Scheme)
	fmt.Println("Fragment", r.URL.Fragment)
	fmt.Println("Opaque", r.URL.Opaque)
	fmt.Println("Query", r.URL.Query())
	fmt.Println("MapKeys Query", reflect.ValueOf(r.URL.Query()).MapKeys())

	fmt.Println("End print param______")
}

func valueExtract(r *http.Request, p *Properties) {
	queryMap := formatQuery(r.URL.Query())
	//queryMap :=
	//namesOfProperties := reflect.ValueOf(r.URL.Query()).MapKeys()

	s := reflect.ValueOf(p).Elem()
	typeOfT := s.Type()
	for i := 0; i < s.NumField(); i++ {
		f := s.Field(i)
		fmt.Printf("%d: %s %s = %v\n", i, typeOfT.Field(i).Name, f.Type(), f.Interface())

		if v, ok := queryMap[typeOfT.Field(i).Name]; ok == true { //todo отформатировать
			fmt.Println("qwe", v)
			setValue(f, v)
		}
	}

	//for _, k := range namesOfProperties {
	//	v, ok := r.URL.Query()[k.String()]
	//	if ok == true {
	//		fmt.Println(k, v[0])
	//	}
	//}
}

func formatQuery(queryMap url.Values) (m map[string]string) {
	m = make(map[string]string)
	for k, v := range queryMap {
		fmt.Println(strings.Title(strings.ToLower(k)), v[0])
		m[strings.Title(strings.ToLower(k))] = v[0]
	}
	return
}

func setValue(field reflect.Value, value string) {
	if field.Type().Name() == "int" {
		//fmt.Println("settability of value:", field.CanSet())
		v, err := strconv.Atoi(value)
		if err != nil {
			panic(err)
		}
		field.SetInt(int64(v))
	} else if field.Type().Name() == "float64" {
		v, err := strconv.ParseFloat(value, 64)
		if err != nil {
			panic(err)
		}
		field.SetFloat(v)
	}
}
