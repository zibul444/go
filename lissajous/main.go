// Copyright Â© 2016 Alan A. A. Donovan & Brian W. Kernighan.
// License: https://creativecommons.org/licenses/by-nc-sa/4.0/
package main

import (
	"fmt"
	"image"
	"image/color"
	"image/gif"
	"math"
	"math/rand"
	"reflect"
	"sort"
	"strconv"
	"strings"
)

//!-main
// Packages not needed by version in book.
import (
	"log"
	"net/http"
	"time"
)

var (
	//palette = []color.Color{
	//	color.Black, color.RGBA{0, 230, 64, 1}, color.White,	color.RGBA{207, 0, 15, 1},
	//	color.RGBA{140, 20, 252, 1}, color.RGBA{77, 5, 232, 1}, color.RGBA{240, 255, 0, 1}}

	palette = []color.Color{
		color.RGBA{0x00, 0x00, 0x00, 0xff},
		color.RGBA{0x00, 0x00, 0x44, 0xff},
		color.RGBA{0x00, 0x00, 0x88, 0xff},
		color.RGBA{0x00, 0x00, 0xcc, 0xff},
		color.RGBA{0x00, 0x44, 0x00, 0xff},
		color.RGBA{0x00, 0x44, 0x44, 0xff},
		color.RGBA{0x00, 0x44, 0x88, 0xff},
		color.RGBA{0x00, 0x44, 0xcc, 0xff},
		color.RGBA{0x00, 0x88, 0x00, 0xff},
		color.RGBA{0x00, 0x88, 0x44, 0xff},
		color.RGBA{0x00, 0x88, 0x88, 0xff},
		color.RGBA{0x00, 0x88, 0xcc, 0xff},
		color.RGBA{0x00, 0xcc, 0x00, 0xff},
		color.RGBA{0x00, 0xcc, 0x44, 0xff},
		color.RGBA{0x00, 0xcc, 0x88, 0xff},
		color.RGBA{0x00, 0xcc, 0xcc, 0xff},
		color.RGBA{0x00, 0xdd, 0xdd, 0xff},
		color.RGBA{0x11, 0x11, 0x11, 0xff},
		color.RGBA{0x00, 0x00, 0x55, 0xff},
		color.RGBA{0x00, 0x00, 0x99, 0xff},
		color.RGBA{0x00, 0x00, 0xdd, 0xff},
		color.RGBA{0x00, 0x55, 0x00, 0xff},
		color.RGBA{0x00, 0x55, 0x55, 0xff},
		color.RGBA{0x00, 0x4c, 0x99, 0xff},
		color.RGBA{0x00, 0x49, 0xdd, 0xff},
		color.RGBA{0x00, 0x99, 0x00, 0xff},
		color.RGBA{0x00, 0x99, 0x4c, 0xff},
		color.RGBA{0x00, 0x99, 0x99, 0xff},
		color.RGBA{0x00, 0x93, 0xdd, 0xff},
		color.RGBA{0x00, 0xdd, 0x00, 0xff},
		color.RGBA{0x00, 0xdd, 0x49, 0xff},
		color.RGBA{0x00, 0xdd, 0x93, 0xff},
		color.RGBA{0x00, 0xee, 0x9e, 0xff},
		color.RGBA{0x00, 0xee, 0xee, 0xff},
		color.RGBA{0x22, 0x22, 0x22, 0xff},
		color.RGBA{0x00, 0x00, 0x66, 0xff},
		color.RGBA{0x00, 0x00, 0xaa, 0xff},
		color.RGBA{0x00, 0x00, 0xee, 0xff},
		color.RGBA{0x00, 0x66, 0x00, 0xff},
		color.RGBA{0x00, 0x66, 0x66, 0xff},
		color.RGBA{0x00, 0x55, 0xaa, 0xff},
		color.RGBA{0x00, 0x4f, 0xee, 0xff},
		color.RGBA{0x00, 0xaa, 0x00, 0xff},
		color.RGBA{0x00, 0xaa, 0x55, 0xff},
		color.RGBA{0x00, 0xaa, 0xaa, 0xff},
		color.RGBA{0x00, 0x9e, 0xee, 0xff},
		color.RGBA{0x00, 0xee, 0x00, 0xff},
		color.RGBA{0x00, 0xee, 0x4f, 0xff},
		color.RGBA{0x00, 0xff, 0x55, 0xff},
		color.RGBA{0x00, 0xff, 0xaa, 0xff},
		color.RGBA{0x00, 0xff, 0xff, 0xff},
		color.RGBA{0x33, 0x33, 0x33, 0xff},
		color.RGBA{0x00, 0x00, 0x77, 0xff},
		color.RGBA{0x00, 0x00, 0xbb, 0xff},
		color.RGBA{0x00, 0x00, 0xff, 0xff},
		color.RGBA{0x00, 0x77, 0x00, 0xff},
		color.RGBA{0x00, 0x77, 0x77, 0xff},
		color.RGBA{0x00, 0x5d, 0xbb, 0xff},
		color.RGBA{0x00, 0x55, 0xff, 0xff},
		color.RGBA{0x00, 0xbb, 0x00, 0xff},
		color.RGBA{0x00, 0xbb, 0x5d, 0xff},
		color.RGBA{0x00, 0xbb, 0xbb, 0xff},
		color.RGBA{0x00, 0xaa, 0xff, 0xff},
		color.RGBA{0x00, 0xff, 0x00, 0xff},
		color.RGBA{0x44, 0x00, 0x44, 0xff},
		color.RGBA{0x44, 0x00, 0x88, 0xff},
		color.RGBA{0x44, 0x00, 0xcc, 0xff},
		color.RGBA{0x44, 0x44, 0x00, 0xff},
		color.RGBA{0x44, 0x44, 0x44, 0xff},
		color.RGBA{0x44, 0x44, 0x88, 0xff},
		color.RGBA{0x44, 0x44, 0xcc, 0xff},
		color.RGBA{0x44, 0x88, 0x00, 0xff},
		color.RGBA{0x44, 0x88, 0x44, 0xff},
		color.RGBA{0x44, 0x88, 0x88, 0xff},
		color.RGBA{0x44, 0x88, 0xcc, 0xff},
		color.RGBA{0x44, 0xcc, 0x00, 0xff},
		color.RGBA{0x44, 0xcc, 0x44, 0xff},
		color.RGBA{0x44, 0xcc, 0x88, 0xff},
		color.RGBA{0x44, 0xcc, 0xcc, 0xff},
		color.RGBA{0x44, 0x00, 0x00, 0xff},
		color.RGBA{0x55, 0x00, 0x00, 0xff},
		color.RGBA{0x55, 0x00, 0x55, 0xff},
		color.RGBA{0x4c, 0x00, 0x99, 0xff},
		color.RGBA{0x49, 0x00, 0xdd, 0xff},
		color.RGBA{0x55, 0x55, 0x00, 0xff},
		color.RGBA{0x55, 0x55, 0x55, 0xff},
		color.RGBA{0x4c, 0x4c, 0x99, 0xff},
		color.RGBA{0x49, 0x49, 0xdd, 0xff},
		color.RGBA{0x4c, 0x99, 0x00, 0xff},
		color.RGBA{0x4c, 0x99, 0x4c, 0xff},
		color.RGBA{0x4c, 0x99, 0x99, 0xff},
		color.RGBA{0x49, 0x93, 0xdd, 0xff},
		color.RGBA{0x49, 0xdd, 0x00, 0xff},
		color.RGBA{0x49, 0xdd, 0x49, 0xff},
		color.RGBA{0x49, 0xdd, 0x93, 0xff},
		color.RGBA{0x49, 0xdd, 0xdd, 0xff},
		color.RGBA{0x4f, 0xee, 0xee, 0xff},
		color.RGBA{0x66, 0x00, 0x00, 0xff},
		color.RGBA{0x66, 0x00, 0x66, 0xff},
		color.RGBA{0x55, 0x00, 0xaa, 0xff},
		color.RGBA{0x4f, 0x00, 0xee, 0xff},
		color.RGBA{0x66, 0x66, 0x00, 0xff},
		color.RGBA{0x66, 0x66, 0x66, 0xff},
		color.RGBA{0x55, 0x55, 0xaa, 0xff},
		color.RGBA{0x4f, 0x4f, 0xee, 0xff},
		color.RGBA{0x55, 0xaa, 0x00, 0xff},
		color.RGBA{0x55, 0xaa, 0x55, 0xff},
		color.RGBA{0x55, 0xaa, 0xaa, 0xff},
		color.RGBA{0x4f, 0x9e, 0xee, 0xff},
		color.RGBA{0x4f, 0xee, 0x00, 0xff},
		color.RGBA{0x4f, 0xee, 0x4f, 0xff},
		color.RGBA{0x4f, 0xee, 0x9e, 0xff},
		color.RGBA{0x55, 0xff, 0xaa, 0xff},
		color.RGBA{0x55, 0xff, 0xff, 0xff},
		color.RGBA{0x77, 0x00, 0x00, 0xff},
		color.RGBA{0x77, 0x00, 0x77, 0xff},
		color.RGBA{0x5d, 0x00, 0xbb, 0xff},
		color.RGBA{0x55, 0x00, 0xff, 0xff},
		color.RGBA{0x77, 0x77, 0x00, 0xff},
		color.RGBA{0x77, 0x77, 0x77, 0xff},
		color.RGBA{0x5d, 0x5d, 0xbb, 0xff},
		color.RGBA{0x55, 0x55, 0xff, 0xff},
		color.RGBA{0x5d, 0xbb, 0x00, 0xff},
		color.RGBA{0x5d, 0xbb, 0x5d, 0xff},
		color.RGBA{0x5d, 0xbb, 0xbb, 0xff},
		color.RGBA{0x55, 0xaa, 0xff, 0xff},
		color.RGBA{0x55, 0xff, 0x00, 0xff},
		color.RGBA{0x55, 0xff, 0x55, 0xff},
		color.RGBA{0x88, 0x00, 0x88, 0xff},
		color.RGBA{0x88, 0x00, 0xcc, 0xff},
		color.RGBA{0x88, 0x44, 0x00, 0xff},
		color.RGBA{0x88, 0x44, 0x44, 0xff},
		color.RGBA{0x88, 0x44, 0x88, 0xff},
		color.RGBA{0x88, 0x44, 0xcc, 0xff},
		color.RGBA{0x88, 0x88, 0x00, 0xff},
		color.RGBA{0x88, 0x88, 0x44, 0xff},
		color.RGBA{0x88, 0x88, 0x88, 0xff},
		color.RGBA{0x88, 0x88, 0xcc, 0xff},
		color.RGBA{0x88, 0xcc, 0x00, 0xff},
		color.RGBA{0x88, 0xcc, 0x44, 0xff},
		color.RGBA{0x88, 0xcc, 0x88, 0xff},
		color.RGBA{0x88, 0xcc, 0xcc, 0xff},
		color.RGBA{0x88, 0x00, 0x00, 0xff},
		color.RGBA{0x88, 0x00, 0x44, 0xff},
		color.RGBA{0x99, 0x00, 0x4c, 0xff},
		color.RGBA{0x99, 0x00, 0x99, 0xff},
		color.RGBA{0x93, 0x00, 0xdd, 0xff},
		color.RGBA{0x99, 0x4c, 0x00, 0xff},
		color.RGBA{0x99, 0x4c, 0x4c, 0xff},
		color.RGBA{0x99, 0x4c, 0x99, 0xff},
		color.RGBA{0x93, 0x49, 0xdd, 0xff},
		color.RGBA{0x99, 0x99, 0x00, 0xff},
		color.RGBA{0x99, 0x99, 0x4c, 0xff},
		color.RGBA{0x99, 0x99, 0x99, 0xff},
		color.RGBA{0x93, 0x93, 0xdd, 0xff},
		color.RGBA{0x93, 0xdd, 0x00, 0xff},
		color.RGBA{0x93, 0xdd, 0x49, 0xff},
		color.RGBA{0x93, 0xdd, 0x93, 0xff},
		color.RGBA{0x93, 0xdd, 0xdd, 0xff},
		color.RGBA{0x99, 0x00, 0x00, 0xff},
		color.RGBA{0xaa, 0x00, 0x00, 0xff},
		color.RGBA{0xaa, 0x00, 0x55, 0xff},
		color.RGBA{0xaa, 0x00, 0xaa, 0xff},
		color.RGBA{0x9e, 0x00, 0xee, 0xff},
		color.RGBA{0xaa, 0x55, 0x00, 0xff},
		color.RGBA{0xaa, 0x55, 0x55, 0xff},
		color.RGBA{0xaa, 0x55, 0xaa, 0xff},
		color.RGBA{0x9e, 0x4f, 0xee, 0xff},
		color.RGBA{0xaa, 0xaa, 0x00, 0xff},
		color.RGBA{0xaa, 0xaa, 0x55, 0xff},
		color.RGBA{0xaa, 0xaa, 0xaa, 0xff},
		color.RGBA{0x9e, 0x9e, 0xee, 0xff},
		color.RGBA{0x9e, 0xee, 0x00, 0xff},
		color.RGBA{0x9e, 0xee, 0x4f, 0xff},
		color.RGBA{0x9e, 0xee, 0x9e, 0xff},
		color.RGBA{0x9e, 0xee, 0xee, 0xff},
		color.RGBA{0xaa, 0xff, 0xff, 0xff},
		color.RGBA{0xbb, 0x00, 0x00, 0xff},
		color.RGBA{0xbb, 0x00, 0x5d, 0xff},
		color.RGBA{0xbb, 0x00, 0xbb, 0xff},
		color.RGBA{0xaa, 0x00, 0xff, 0xff},
		color.RGBA{0xbb, 0x5d, 0x00, 0xff},
		color.RGBA{0xbb, 0x5d, 0x5d, 0xff},
		color.RGBA{0xbb, 0x5d, 0xbb, 0xff},
		color.RGBA{0xaa, 0x55, 0xff, 0xff},
		color.RGBA{0xbb, 0xbb, 0x00, 0xff},
		color.RGBA{0xbb, 0xbb, 0x5d, 0xff},
		color.RGBA{0xbb, 0xbb, 0xbb, 0xff},
		color.RGBA{0xaa, 0xaa, 0xff, 0xff},
		color.RGBA{0xaa, 0xff, 0x00, 0xff},
		color.RGBA{0xaa, 0xff, 0x55, 0xff},
		color.RGBA{0xaa, 0xff, 0xaa, 0xff},
		color.RGBA{0xcc, 0x00, 0xcc, 0xff},
		color.RGBA{0xcc, 0x44, 0x00, 0xff},
		color.RGBA{0xcc, 0x44, 0x44, 0xff},
		color.RGBA{0xcc, 0x44, 0x88, 0xff},
		color.RGBA{0xcc, 0x44, 0xcc, 0xff},
		color.RGBA{0xcc, 0x88, 0x00, 0xff},
		color.RGBA{0xcc, 0x88, 0x44, 0xff},
		color.RGBA{0xcc, 0x88, 0x88, 0xff},
		color.RGBA{0xcc, 0x88, 0xcc, 0xff},
		color.RGBA{0xcc, 0xcc, 0x00, 0xff},
		color.RGBA{0xcc, 0xcc, 0x44, 0xff},
		color.RGBA{0xcc, 0xcc, 0x88, 0xff},
		color.RGBA{0xcc, 0xcc, 0xcc, 0xff},
		color.RGBA{0xcc, 0x00, 0x00, 0xff},
		color.RGBA{0xcc, 0x00, 0x44, 0xff},
		color.RGBA{0xcc, 0x00, 0x88, 0xff},
		color.RGBA{0xdd, 0x00, 0x93, 0xff},
		color.RGBA{0xdd, 0x00, 0xdd, 0xff},
		color.RGBA{0xdd, 0x49, 0x00, 0xff},
		color.RGBA{0xdd, 0x49, 0x49, 0xff},
		color.RGBA{0xdd, 0x49, 0x93, 0xff},
		color.RGBA{0xdd, 0x49, 0xdd, 0xff},
		color.RGBA{0xdd, 0x93, 0x00, 0xff},
		color.RGBA{0xdd, 0x93, 0x49, 0xff},
		color.RGBA{0xdd, 0x93, 0x93, 0xff},
		color.RGBA{0xdd, 0x93, 0xdd, 0xff},
		color.RGBA{0xdd, 0xdd, 0x00, 0xff},
		color.RGBA{0xdd, 0xdd, 0x49, 0xff},
		color.RGBA{0xdd, 0xdd, 0x93, 0xff},
		color.RGBA{0xdd, 0xdd, 0xdd, 0xff},
		color.RGBA{0xdd, 0x00, 0x00, 0xff},
		color.RGBA{0xdd, 0x00, 0x49, 0xff},
		color.RGBA{0xee, 0x00, 0x4f, 0xff},
		color.RGBA{0xee, 0x00, 0x9e, 0xff},
		color.RGBA{0xee, 0x00, 0xee, 0xff},
		color.RGBA{0xee, 0x4f, 0x00, 0xff},
		color.RGBA{0xee, 0x4f, 0x4f, 0xff},
		color.RGBA{0xee, 0x4f, 0x9e, 0xff},
		color.RGBA{0xee, 0x4f, 0xee, 0xff},
		color.RGBA{0xee, 0x9e, 0x00, 0xff},
		color.RGBA{0xee, 0x9e, 0x4f, 0xff},
		color.RGBA{0xee, 0x9e, 0x9e, 0xff},
		color.RGBA{0xee, 0x9e, 0xee, 0xff},
		color.RGBA{0xee, 0xee, 0x00, 0xff},
		color.RGBA{0xee, 0xee, 0x4f, 0xff},
		color.RGBA{0xee, 0xee, 0x9e, 0xff},
		color.RGBA{0xee, 0xee, 0xee, 0xff},
		color.RGBA{0xee, 0x00, 0x00, 0xff},
		color.RGBA{0xff, 0x00, 0x00, 0xff},
		color.RGBA{0xff, 0x00, 0x55, 0xff},
		color.RGBA{0xff, 0x00, 0xaa, 0xff},
		color.RGBA{0xff, 0x00, 0xff, 0xff},
		color.RGBA{0xff, 0x55, 0x00, 0xff},
		color.RGBA{0xff, 0x55, 0x55, 0xff},
		color.RGBA{0xff, 0x55, 0xaa, 0xff},
		color.RGBA{0xff, 0x55, 0xff, 0xff},
		color.RGBA{0xff, 0xaa, 0x00, 0xff},
		color.RGBA{0xff, 0xaa, 0x55, 0xff},
		color.RGBA{0xff, 0xaa, 0xaa, 0xff},
		color.RGBA{0xff, 0xaa, 0xff, 0xff},
		color.RGBA{0xff, 0xff, 0x00, 0xff},
		color.RGBA{0xff, 0xff, 0x55, 0xff},
		color.RGBA{0xff, 0xff, 0xaa, 0xff},
		color.RGBA{0xff, 0xff, 0xff, 0xff}}

	colorIndex int // next color in palette
)

func main() {

	// The sequence of images is deterministic unless we seed
	// the pseudo-random number generator using the current time.
	// Thanks to Randall McPherson for pointing out the omission.
	rand.Seed(time.Now().UTC().UnixNano())

	http.HandleFunc("/", lissajous)

	log.Fatalln(http.ListenAndServe("localhost:8000", nil))
}

func lissajous(out http.ResponseWriter, r *http.Request) {

	cycles := 5   // number of complete x oscillator revolutions
	res := 0.001  // angular resolution
	size := 400   // image canvas covers [-size..+size]
	nframes := 64 // number of animation frames
	delay := 8    // delay between frames in 10ms units

	printParam(r)

	valueExtract(r)

	setTransferredValues(r, &cycles, &res, &size, &nframes, &delay)

	sortSlice()

	blackIndex := generateIndex()

	fmt.Println("colorIndex", blackIndex, "\n______________")

	freq := rand.Float64() * 3.0 // relative frequency of y oscillator
	anim := gif.GIF{LoopCount: nframes}
	phase := 0.0 // phase difference
	for i := 0; i < nframes; i++ {
		rect := image.Rect(0, 0, 2*size+1, 2*size+1)
		img := image.NewPaletted(rect, palette)
		for t := 0.0; t < float64(cycles)*2*math.Pi; t += res {
			x := math.Sin(t)
			y := math.Sin(t*freq + phase)
			img.SetColorIndex(size+int(x*float64(size)+0.5), size+int(y*float64(size)+0.5),
				uint8(blackIndex))
		}
		phase += 0.1
		anim.Delay = append(anim.Delay, delay)
		anim.Image = append(anim.Image, img)
	}
	gif.EncodeAll(out, &anim) // NOTE: ignoring encoding errors
}

func generateIndex() int {
	for colorIndex = rand.Intn(int(len(palette))); colorIndex == 0; colorIndex = rand.Intn(int(len(palette))) {
	}
	return colorIndex
}

func sortSlice() {
	sort.Slice(palette, func(i, j int) bool {
		_, gi, _, _ := palette[i].RGBA()
		_, gj, _, _ := palette[j].RGBA()
		return gi < gj
	})
}

func setTransferredValues(r *http.Request, cycles *int, res *float64, size *int, nframes *int, delay *int) {
	if keys, ok := r.URL.Query()["cycles"]; ok {
		fmt.Println("cycles", keys[0])
		*cycles, _ = strconv.Atoi(keys[0])
	}
	if keys, ok := r.URL.Query()["res"]; ok {
		fmt.Println("res", keys)
		qwe, _ := strconv.Atoi(keys[0])
		*res = float64(qwe)
	}
	if keys, ok := r.URL.Query()["size"]; ok {
		fmt.Println("size", keys)
		*size, _ = strconv.Atoi(keys[0])
	}
	if keys, ok := r.URL.Query()["nframes"]; ok {
		fmt.Println("nframes", keys)
		*nframes, _ = strconv.Atoi(keys[0])
	}
	if keys, ok := r.URL.Query()["delay"]; ok {
		fmt.Println("delay", keys)
		*delay, _ = strconv.Atoi(keys[0])
	}
}

func printParam(r *http.Request) {
	//r.ParseForm()
	fmt.Println("Host", r.URL.Host)
	fmt.Println("RawQuery", strings.Split(r.URL.RawQuery, "&")[1])
	fmt.Println("RawPath", r.URL.RawPath)
	fmt.Println("Path", r.URL.Path)
	fmt.Println("ForceQuery", r.URL.ForceQuery)
	fmt.Println("Scheme", r.URL.Scheme)
	fmt.Println("Fragment", r.URL.Fragment)
	fmt.Println("Opaque", r.URL.Opaque)
	fmt.Println("Query", r.URL.Query())
	fmt.Println("MapKeys Query", reflect.ValueOf(r.URL.Query()).MapKeys())
}

// TODO ÐÐµÑÐ¾Ð´ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÐ´ÐµÑ ÑÑÑÐ°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÑÑ Ð¿ÐµÑÐµÐ´Ð°Ð½ÑÐµ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ Ð² ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÑÑÑÐ¸Ðµ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½ÑÐµ
func valueExtract(r *http.Request) {
	for _, k := range reflect.ValueOf(r.URL.Query()).MapKeys() {
		v, _ := r.URL.Query()[k.String()]
		fmt.Println(k, v[0])
	}
}
